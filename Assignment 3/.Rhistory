setMatrix <- function(newValue) {
x <<- newValue
# since the matrix is assigned a new value, flush the cache
cache <<- NULL
}
# returns the stored matrix
getMatrix <- function() {
x
}
# cache the given argument
cacheInverse <- function(solve) {
cache <<- solve
}
# get the cached value
getInverse <- function() {
cache
}
# return a list. Each named element of the list is a function
list(setMatrix = setMatrix, getMatrix = getMatrix, cacheInverse = cacheInverse, getInverse = getInverse)
}
# The following function calculates the inverse of a "special" matrix created with
# makeCacheMatrix
cacheSolve <- function(y, ...) {
# get the cached value
inverse <- y$getInverse()
# if a cached value exists return it
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
# otherwise get the matrix, caclulate the inverse and store it in
# the cache
data <- y$getMatrix()
inverse <- solve(data)
y$cacheInverse(inverse)
# return the inverse
inverse
}
amatrix<- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$get()
makeCacheMatrix<-function(m=numeric()){
#m<-matrix(x,row,col)
i<-NULL
set<-function(y){
m<<-(y)
i<<-NULL
}
get<-function() m
setinverse<-function(inverse) i<<-inverse
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve<-function(m=numeric(),...){
i<-m$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data<-m$get()
i<-solve(m,...)
m$setinverse(i)
i
}
amatrix<- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
makeCacheMatrix<-function(m=numeric()){
#m<-matrix(x,row,col)
i<-NULL
set<-function(y){
m<<-(y)
i<<-NULL
}
get<-function() m
setinverse<-function(solve) i<<-solve
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve<-function(m=numeric(),...){
i<-m$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data<-m$get()
i<-solve(m,...)
m$setinverse(i)
i
}
amatrix<- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
makeCacheMatrix<-function(m=numeric()){
#m<-matrix(x,row,col)
i<-NULL
set<-function(y){
m<<-(y)
i<<-NULL
}
get<-function() m
setinverse<-function(solve) i<<-solve
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve<-function(m=numeric(), ...){
i<-m$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data<-m$get()
i<-solve(m, ...)
m$setinverse(i)
i
}
amatrix<- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
makeCacheMatrix<-function(m=numeric()){
#m<-matrix(x,row,col)
i<-NULL
set<-function(y){
m<<-(y)
i<<-NULL
}
get<-function() m
setinverse<-function(solve) i<<-solve
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve<-function(n=numeric(), ...){
i<-n$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data<-n$get()
i<-solve(n, ...)
n$setinverse(i)
i
}
amatrix<- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
makeCacheMatrix<-function(m=numeric()){
#m<-matrix(x,row,col)
i<-NULL
set<-function(y){
m<<-(y)
i<<-NULL
}
get<-function() m
setinverse<-function(solve) i<<-solve
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve<-function(n=numeric(), ...){
i<-n$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data<-n$get()
i<-solve(n)
n$setinverse(i)
i
}
amatrix<- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
makeCacheMatrix<-function(m=numeric()){
#m<-matrix(x,row,col)
i<-NULL
set<-function(y){
m<<-(y)
i<<-NULL
}
get<-function() m
setinverse<-function(solve) i<<-solve
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve<-function(n=numeric(), ...){
i<-n$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data<-n$get()
i<-solve(data)
n$setinverse(i)
i
}
amatrix<- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
makeCacheMatrix<-function(m=matrix()){
#m<-matrix(x,row,col)
i<-NULL
set<-function(y){
m<<-(y)
i<<-NULL
}
get<-function() m
setinverse<-function(solve) i<<-solve
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve<-function(n=matrix(), ...){
i<-n$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data<-n$get()
i<-solve(data)
n$setinverse(i)
i
}
amatrix<- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
cacheSolve<-function(n=matrix()){
makeCacheMatrix<-function(m=matrix()){
#m<-matrix(x,row,col)
i<-NULL
set<-function(y){
m<<-(y)
i<<-NULL
}
get<-function() m
setinverse<-function(solve) i<<-solve
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve<-function(n=matrix()){
i<-n$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data<-n$get()
i<-solve(data)
n$setinverse(i)
i
}
amatrix<- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
>
makeCacheMatrix<-function(m=matrix()){
#m<-matrix(x,row,col)
i<-NULL
set<-function(y){
m<<-(y)
i<<-NULL
}
get<-function() m
setinverse<-function(solve) i<<-solve
getinverse<-function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve<-function(n=matrix()){
i<-n$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data<-n$get()
i<-solve(data)
n$setinverse(i)
i
}
amatrix<- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
View(Iris)
library(iris)
library(datasets)
data(iris)
View(iris)
lapply(iris$Sepal.Length,mean,iris$Species="virginica")
iris$virginica
iris$Species
mean(mtcars$mpg, mtcars$cyl)
sapply((mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl), mean
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(iris$Sepal.Length, iris$Species), mean)
rnorm(5)
set.seed(1)
rnorm(5)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
set.seed(2)
rnorm(5)
set.seed(2)
rnorm(5)
set.seed(1)
rnorm(5)
?lm
best <- function(state, outcome) {
## Read outcome data
##outcome_name: "heart attack", "heart failure", "pneumonia"
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check if the state and outcomes are valid
states <- data[ , 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#get rid of the NA's in the desired outcome column
required_columns <- as.numeric(new_data[,outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
#find the hospitals in the rows with the minimum outcome value
columns_considered <- as.numeric(desired_data[, outcome_column])
desired_rows <- which(columns_considered == min(columns_considered))
desired_hospitals <- desired_data[desired_rows, 2]
#if there are multiple hospitals with the minimum outcome value, then
#return the first hospital name from the alphabetically sorted hospital
#names list
if (length(desired_hospitals) > 1) {
hospitals_sorted <- sort(desired_hospitals)
hospitals_sorted[1]
}
else {
desired_hospitals
}
}
clr
clrscrn
getwd()
setwd("C:/Users/Navajith/Documents/R_Coursera/Assignment 3")
getwd()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
1
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check if the state and outcomes are valid
states <- data[ , 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#if num is greater that the number of hospitals in the desired state,
# return NA
if (is.numeric(num) == TRUE) {
if (length(data[,2]) < num) {
return(NA)
}
}
#get rid of the NA's in the desired outcome column
new_data[, outcome_column] <- as.numeric(new_data[,outcome_column])
bad <- is.na(new_data[, outcome_column])
desired_data <- new_data[!bad, ]
#arrange the modified dataframe in ascending order of the outcome values
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column_name], desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
#if nume is either "best" or "worst", then interpret it to the
#corresponding numerical value
if (is.character(num) == TRUE) {
if (num == "best") {
num = 1
}
else if (num == "worst") {
num = length(ordered_desired_data[, outcome_column])
}
}
#return the hospital name with the outcome ranking of num
ordered_desired_data[num, 2]
}
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#create a list of states and initialize a character array to hold the
#required hospital names
state <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(state)) {
hospital[i] <- rankhospital(state[i], outcome, num)
}
data.frame(hospital, state)
}
head(rankall("heart attack", 20), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
## rankall.R
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = sort(unique(data[,7]))
if (!State %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.State <- data[data$State==validState[i],]
# order data by outcome
sorted.data.State <- data.State[order(as.numeric(data.state[[colName]]),data.State[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.State[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,State=validState,row.names=validState)
}
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
lapply(split(airquality,airquality$Month),mean)
lapply(split(airquality,airquality$Month),colMeans)
lapply(split(airquality,airquality$Month),colMeans,na.rm=TRUE)
lapply(split(airquality,airquality$Month),colMeans(,c("Ozone","Temp")),na.rm=TRUE)
lapply(split(airquality,airquality$Month),colMeans(airquality[,c("Ozone","Temp")],na.rm=TRUE)
)
lapply(split(airquality,airquality$Month),colMeans(airquality[,c("Ozone","Temp")],na.rm=TRUE))
lapply(split(airquality,airquality$Month),colMeans,na.rm=TRUE)
lapply(split(airquality,airquality$Month),function(x) colMeans(x[,c("Ozone","Temp"),na.rm=TRUE]))
lapply(split(airquality,airquality$Month),function(x) colMeans(x[,c("Ozone","Temp")]),na.rm=TRUE)
lapply(split(airquality,airquality$Month),function(x) colMeans(x[,c("Ozone","Temp")]))
lapply(split(airquality,airquality$Month),function(x) colMeans(x[,c("Ozone","Temp")]),na.rm=TRUE)
lapply(split(airquality,airquality$Month),function(x) colMeans(x[,c("Ozone","Temp")],na.rm=TRUE))
sapply(split(airquality,airquality$Month),function(x) colMeans(x[,c("Ozone","Temp")],na.rm=TRUE))
